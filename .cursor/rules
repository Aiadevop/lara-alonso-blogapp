# Reglas de Arquitectura - Lara Alonso Blog App

## üèóÔ∏è ESTRUCTURA DEL PROYECTO

### Organizaci√≥n de Directorios
- **app/**: Directorio principal de Next.js 13+ con App Router
  - **components/**: Componentes reutilizables organizados por funcionalidad
    - **ui/**: Componentes de interfaz de usuario (TypeScript obligatorio)
    - Componentes espec√≠ficos del dominio en el nivel ra√≠z
  - **api/**: Rutas de API con estructura RESTful
  - **lib/**: Utilidades, configuraciones y helpers
  - **globals.css**: Estilos globales y variables CSS
  - **layout.tsx**: Layout ra√≠z de la aplicaci√≥n
  - **page.tsx**: P√°gina principal

### Convenciones de Nomenclatura
- **Archivos de componentes**: PascalCase con extensi√≥n .tsx (ej: `PostCard.tsx`, `CategoryFilter.tsx`)
- **Archivos de utilidades**: camelCase con extensi√≥n .ts (ej: `config.ts`, `utils.ts`)
- **Archivos de p√°ginas**: lowercase con guiones y extensi√≥n .tsx (ej: `frontend-development-tips/page.tsx`)
- **Variables de entorno**: UPPER_SNAKE_CASE con prefijos descriptivos
- **Funciones y variables**: camelCase
- **Constantes**: UPPER_SNAKE_CASE
- **Interfaces y tipos**: PascalCase con prefijo I para interfaces (ej: `IPost`, `IUser`)

### Estructura de Componentes TypeScript
```tsx
// Estructura est√°ndar para componentes TypeScript
import React, { useState, useEffect } from 'react'
import { NextPage } from 'next'

// 1. Imports de librer√≠as externas
// 2. Imports de componentes internos
// 3. Imports de utilidades y tipos
// 4. Definici√≥n de interfaces y tipos
interface ComponentProps {
  title: string;
  description?: string;
  onAction?: (value: string) => void;
}

// 5. Componente principal con tipado
const Component: NextPage<ComponentProps> = ({ title, description, onAction }) => {
  const [state, setState] = useState<string>('')
  
  return (
    <div>
      <h1>{title}</h1>
      {description && <p>{description}</p>}
    </div>
  )
}

// 6. Export default
export default Component
```

## üìù TYPESCRIPT

### Configuraci√≥n Obligatoria
- **Todos los archivos de componentes**: Deben usar extensi√≥n `.tsx`
- **Todos los archivos de utilidades**: Deben usar extensi√≥n `.ts`
- **Configuraci√≥n estricta**: `tsconfig.json` con `strict: true`
- **Verificaci√≥n de tipos**: Ejecutar `npm run type-check` antes de cada commit

### Tipado de Componentes
- **Props**: Siempre definir interfaces para las props de componentes
- **Estado**: Tipar todos los estados con `useState<Type>()`
- **Eventos**: Tipar eventos con `React.MouseEvent`, `React.ChangeEvent`, etc.
- **Refs**: Usar `useRef<HTMLElement>()` con tipado apropiado

### Interfaces y Tipos
```typescript
// Interfaces para datos
interface Post {
  id: number;
  title: string;
  description: string;
  category: string;
  imageUrl: string;
  author: Author;
}

interface Author {
  name: string;
  imageUrl: string;
  href?: string;
}

// Props de componentes
interface PostCardProps {
  post: Post;
  onSelect?: (post: Post) => void;
}

// Tipos para funciones
type CategoryFilter = (category: string | null) => void;
```

### Mejores Pr√°cticas TypeScript
- **Tipos estrictos**: Evitar `any`, usar tipos espec√≠ficos
- **Interfaces vs Types**: Usar interfaces para objetos, types para uniones
- **Generics**: Usar generics para componentes reutilizables
- **Utility Types**: Aprovechar `Partial<T>`, `Pick<T>`, `Omit<T>`
- **Validaci√≥n**: Usar librer√≠as como Zod para validaci√≥n de datos

### Herramientas de Desarrollo
- **ESLint**: Configuraci√≥n con reglas de TypeScript
- **Prettier**: Formateo autom√°tico de c√≥digo TypeScript
- **TypeScript Compiler**: Verificaci√≥n de tipos en tiempo de compilaci√≥n
- **IntelliSense**: Autocompletado y detecci√≥n de errores en IDE

## üîí SEGURIDAD

### Variables de Entorno
- **NUNCA** commitees archivos `.env` al repositorio
- Usa `.env.local` para desarrollo y variables de entorno del hosting para producci√≥n
- Prefijo obligatorio para variables p√∫blicas: `NEXT_PUBLIC_`
- Variables sensibles sin prefijo (solo servidor)
- Validar todas las variables de entorno al inicio de la aplicaci√≥n

### APIs y Endpoints
- **Validaci√≥n de entrada**: Siempre validar par√°metros de entrada en rutas API
- **Rate limiting**: Implementar l√≠mites de velocidad para endpoints p√∫blicos
- **CORS**: Configurar CORS apropiadamente (actualmente muy permisivo)
- **Headers de seguridad**: Mantener headers de seguridad en `next.config.js`
- **Sanitizaci√≥n**: Sanitizar todos los inputs del usuario
- **Autenticaci√≥n**: Implementar autenticaci√≥n para endpoints sensibles

### Manejo de Datos Sensibles
- **API Keys**: Nunca exponer claves privadas en el cliente
- **Hash de credenciales**: Usar hashing seguro para credenciales
- **Tokens**: Implementar rotaci√≥n de tokens y expiraci√≥n
- **Logs**: No registrar informaci√≥n sensible en logs

### Configuraci√≥n de Seguridad
```javascript
// Headers de seguridad obligatorios
{
  'X-Frame-Options': 'DENY',
  'X-Content-Type-Options': 'nosniff',
  'Referrer-Policy': 'origin-when-cross-origin',
  'Permissions-Policy': 'camera=(), microphone=(), geolocation=()',
  'Content-Security-Policy': 'default-src \'self\'; script-src \'self\' \'unsafe-inline\''
}
```

## üß™ TESTING Y CALIDAD

### Testing Obligatorio
- **Unit Tests**: Para utilidades y funciones puras
- **Component Tests**: Para componentes cr√≠ticos de UI
- **Integration Tests**: Para flujos de API
- **E2E Tests**: Para flujos de usuario principales
- **Performance Tests**: Para componentes con animaciones o c√°lculos pesados

### Herramientas de Testing
```json
{
  "devDependencies": {
    "@testing-library/react": "^14.0.0",
    "@testing-library/jest-dom": "^6.0.0",
    "@testing-library/user-event": "^14.0.0",
    "jest": "^29.0.0",
    "jest-environment-jsdom": "^29.0.0",
    "@types/jest": "^29.0.0",
    "@playwright/test": "^1.40.0",
    "cypress": "^13.0.0",
    "@types/testing-library__jest-dom": "^6.0.0"
  }
}
```

### Cobertura de Tests
- **M√≠nimo 80%** de cobertura de c√≥digo
- **100%** de cobertura para funciones cr√≠ticas de seguridad
- Tests para todos los endpoints de API
- Tests para componentes de UI principales

### Linting y Formateo
- **ESLint**: Configuraci√≥n estricta con reglas de Next.js
- **Prettier**: Formateo autom√°tico de c√≥digo
- **Husky**: Pre-commit hooks para validaci√≥n
- **TypeScript**: Verificaci√≥n de tipos estricta

### Scripts de Calidad
```json
{
  "scripts": {
    "test": "jest",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage",
    "test:e2e": "playwright test",
    "lint": "next lint",
    "lint:fix": "next lint --fix",
    "type-check": "tsc --noEmit",
    "format": "prettier --write .",
    "format:check": "prettier --check .",
    "quality": "npm run lint && npm run type-check && npm run test"
  }
}
```

## üìà ESCALABILIDAD Y MANTENIBILIDAD

### Arquitectura de Componentes
- **Componentes at√≥micos**: Crear componentes peque√±os y reutilizables
- **Composici√≥n**: Preferir composici√≥n sobre herencia
- **Props interface**: Definir interfaces claras para props
- **Estado local**: Minimizar estado global, usar estado local cuando sea posible
- **Custom hooks**: Extraer l√≥gica reutilizable en custom hooks

### Gesti√≥n de Estado
- **React Context**: Para estado global simple
- **Zustand/Redux**: Para estado complejo (evaluar necesidad)
- **Server State**: Usar React Query/SWR para datos del servidor
- **Local Storage**: Para preferencias del usuario

### Performance
- **Lazy Loading**: Implementar lazy loading para componentes pesados
- **Image Optimization**: Usar Next.js Image component siempre
- **Code Splitting**: Dividir c√≥digo por rutas y funcionalidades
- **Memoizaci√≥n**: Usar React.memo, useMemo, useCallback apropiadamente
- **Bundle Analysis**: Analizar tama√±o de bundles regularmente

### Optimizaciones de Next.js
```javascript
// Configuraci√≥n de optimizaci√≥n
{
  experimental: {
    optimizeCss: true,
    optimizePackageImports: ['@headlessui/react', '@heroicons/react'],
  },
  images: {
    formats: ['image/avif', 'image/webp'],
    deviceSizes: [640, 750, 828, 1080, 1200, 1920, 2048, 3840],
    minimumCacheTTL: 60,
  },
  compress: true,
  poweredByHeader: false
}
```

### Base de Datos y APIs
- **Supabase**: Para base de datos y autenticaci√≥n
- **API Routes**: Estructura RESTful con validaci√≥n
- **Caching**: Implementar estrategias de cach√© apropiadas
- **Error Handling**: Manejo consistente de errores
- **Rate Limiting**: Proteger endpoints de abuso

### Documentaci√≥n
- **README**: Documentaci√≥n completa del proyecto
- **API Docs**: Documentar todos los endpoints
- **Component Docs**: Documentar componentes complejos
- **Deployment**: Gu√≠a de despliegue y configuraci√≥n
- **Changelog**: Mantener registro de cambios

## üöÄ DESARROLLO Y DEPLOYMENT

### Git Workflow
- **Branching**: Git Flow con branches feature, develop, main
- **Commits**: Commits sem√°nticos (feat:, fix:, docs:, etc.)
- **Pull Requests**: Revisi√≥n obligatoria de c√≥digo
- **CI/CD**: Pipeline automatizado de testing y deployment

### Entornos
- **Development**: Configuraci√≥n local con hot reload
- **Staging**: Entorno de pruebas con datos de prueba
- **Production**: Entorno optimizado con monitoreo

### Monitoreo y Analytics
- **Vercel Analytics**: Para m√©tricas de performance
- **Error Tracking**: Implementar Sentry o similar
- **Performance Monitoring**: Monitorear Core Web Vitals
- **Uptime Monitoring**: Verificar disponibilidad del sitio

### Backup y Recuperaci√≥n
- **Database Backups**: Backups autom√°ticos de Supabase
- **Code Backups**: Repositorio Git como backup principal
- **Asset Backups**: Backup de im√°genes y assets est√°ticos
- **Disaster Recovery**: Plan de recuperaci√≥n documentado

## üì± RESPONSIVE Y ACCESIBILIDAD

### Responsive Design
- **Mobile First**: Dise√±o mobile-first con Tailwind CSS
- **Breakpoints**: Usar breakpoints est√°ndar de Tailwind
- **Touch Targets**: M√≠nimo 44px para elementos t√°ctiles
- **Viewport**: Configuraci√≥n correcta del viewport

### Accesibilidad (A11y)
- **Semantic HTML**: Usar elementos sem√°nticos apropiados
- **ARIA Labels**: Etiquetas ARIA para elementos interactivos
- **Keyboard Navigation**: Navegaci√≥n completa por teclado
- **Screen Readers**: Compatibilidad con lectores de pantalla
- **Color Contrast**: Cumplir ratios de contraste WCAG AA
- **Focus Management**: Gesti√≥n apropiada del foco

### Testing de Accesibilidad
```bash
# Herramientas recomendadas
npm install --save-dev @axe-core/react
npm install --save-dev jest-axe
```

## üì¶ GESTI√ìN SEGURA DE DEPENDENCIAS

### Pol√≠tica de Actualizaciones
- **NUNCA** ejecutar `npm update` o `npm install` sin revisi√≥n previa
- **NUNCA** usar `npm audit fix` autom√°ticamente
- **SIEMPRE** investigar vulnerabilidades antes de actualizar
- **SIEMPRE** verificar la reputaci√≥n de los paquetes nuevos

### Proceso de Actualizaci√≥n Segura
1. **Audit de Seguridad**: Ejecutar `npm audit` para identificar vulnerabilidades
2. **Investigaci√≥n**: Investigar cada vulnerabilidad en:
   - GitHub Security Advisories
   - Snyk Vulnerability Database
   - NPM Security Advisories
   - CVE Database
3. **Evaluaci√≥n de Riesgo**: Clasificar vulnerabilidades por:
   - Severidad (Critical, High, Moderate, Low)
   - Impacto en el proyecto
   - Disponibilidad de parches seguros
4. **Actualizaci√≥n Selectiva**: Actualizar solo dependencias con vulnerabilidades cr√≠ticas/altas
5. **Testing**: Probar exhaustivamente despu√©s de cada actualizaci√≥n

### Herramientas de Seguridad
```bash
# Verificar vulnerabilidades
npm audit

# Verificar licencias
npm audit --audit-level=moderate

# Verificar paquetes obsoletos (sin actualizar)
npm outdated

# Verificar integridad de paquetes
npm ci --audit

# An√°lisis de dependencias
npx audit-ci --config audit-ci.json
```

### Configuraci√≥n de Seguridad
```json
// .npmrc - Configuraci√≥n segura de npm
audit-level=moderate
fund=false
update-notifier=false
save-exact=true
package-lock=true
```

### Verificaci√≥n de Paquetes
- **Verificar autor**: Revisar la reputaci√≥n del mantenedor
- **Verificar downloads**: Paquetes con muchas descargas son m√°s seguros
- **Verificar √∫ltima actualizaci√≥n**: Evitar paquetes abandonados
- **Verificar dependencias**: Revisar las dependencias del paquete
- **Verificar c√≥digo fuente**: Revisar el c√≥digo en GitHub cuando sea posible

### Dependencias Cr√≠ticas a Monitorear
- **Next.js**: Framework principal
- **React**: Biblioteca de UI
- **TypeScript**: Sistema de tipos
- **Tailwind CSS**: Framework de estilos
- **ESLint**: Linter de c√≥digo
- **Prettier**: Formateador de c√≥digo
- **@types/react**: Tipos de React para TypeScript
- **@types/node**: Tipos de Node.js para TypeScript

### Alertas de Seguridad
- Configurar alertas de GitHub para dependencias
- Monitorear feeds de seguridad de npm
- Revisar semanalmente vulnerabilidades conocidas
- Mantener lista de dependencias cr√≠ticas actualizada

### Backup Antes de Actualizaciones
- **Commit completo**: Hacer commit antes de cualquier actualizaci√≥n
- **Branch de testing**: Crear branch espec√≠fico para testing
- **Rollback plan**: Tener plan de rollback documentado
- **Testing exhaustivo**: Probar todas las funcionalidades despu√©s de actualizar

## üîß HERRAMIENTAS Y CONFIGURACI√ìN

### Desarrollo
- **VS Code**: Editor recomendado con extensiones espec√≠ficas
- **Extensions**: ESLint, Prettier, Tailwind CSS IntelliSense
- **Debugging**: Configuraci√≥n de debugging para Next.js
- **Hot Reload**: Configuraci√≥n optimizada de hot reload

### Build y Deployment
- **Vercel**: Plataforma de deployment recomendada
- **Environment Variables**: Configuraci√≥n segura de variables
- **Build Optimization**: Optimizaciones de build para producci√≥n
- **CDN**: Configuraci√≥n de CDN para assets est√°ticos

### Monitoreo
- **Performance**: Core Web Vitals y m√©tricas de performance
- **Errors**: Tracking de errores en tiempo real
- **Analytics**: M√©tricas de uso y comportamiento
- **Uptime**: Monitoreo de disponibilidad

## üîÑ MIGRACI√ìN A TYPESCRIPT

### Proceso de Migraci√≥n
1. **Configuraci√≥n inicial**:
   - Crear `tsconfig.json` con configuraci√≥n estricta
   - Instalar dependencias de TypeScript
   - Configurar ESLint para TypeScript

2. **Migraci√≥n de archivos**:
   - Renombrar `.jsx` ‚Üí `.tsx`
   - Renombrar `.js` ‚Üí `.ts`
   - Actualizar imports para usar extensiones `.tsx`/`.ts`

3. **Tipado progresivo**:
   - Definir interfaces para props de componentes
   - Tipar estados con `useState<Type>()`
   - Agregar tipos para funciones y eventos
   - Eliminar gradualmente el uso de `any`

4. **Validaci√≥n**:
   - Ejecutar `npm run type-check`
   - Corregir errores de tipos
   - Verificar que la aplicaci√≥n compile sin errores

### Archivos a Migrar
- `app/page.jsx` ‚Üí `app/page.tsx`
- `app/layout.js` ‚Üí `app/layout.tsx`
- `app/components/ui/*.jsx` ‚Üí `app/components/ui/*.tsx`
- `app/lib/*.js` ‚Üí `app/lib/*.ts`
- `app/api/**/*.js` ‚Üí `app/api/**/*.ts`

### Configuraci√≥n TypeScript
```json
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "es6"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "baseUrl": ".",
    "paths": {
      "@/*": ["./app/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
```

## üìã CHECKLIST DE IMPLEMENTACI√ìN

### Antes de cada commit:
- [ ] Tests pasando
- [ ] Linting sin errores
- [ ] Type checking exitoso
- [ ] Build exitoso
- [ ] Performance aceptable
- [ ] Accesibilidad verificada
- [ ] Dependencias verificadas (sin vulnerabilidades cr√≠ticas)

### Antes de cada release:
- [ ] Todos los tests pasando
- [ ] Documentaci√≥n actualizada
- [ ] Changelog actualizado
- [ ] Performance optimizada
- [ ] Seguridad verificada
- [ ] Backup realizado
- [ ] Audit de dependencias limpio
- [ ] Dependencias cr√≠ticas actualizadas y probadas

### Mantenimiento regular:
- [ ] **Audit de dependencias** (semanal)
- [ ] **Investigaci√≥n de vulnerabilidades** (cuando aparezcan)
- [ ] **Actualizaci√≥n selectiva** (solo vulnerabilidades cr√≠ticas/altas)
- [ ] Revisar m√©tricas de performance
- [ ] Verificar logs de errores
- [ ] Actualizar documentaci√≥n
- [ ] Revisar configuraci√≥n de seguridad
- [ ] **Verificar integridad de package-lock.json**

### Proceso de Actualizaci√≥n de Dependencias:
- [ ] Hacer commit completo del estado actual
- [ ] Crear branch de testing
- [ ] Ejecutar `npm audit` y documentar vulnerabilidades
- [ ] Investigar cada vulnerabilidad en fuentes oficiales
- [ ] Clasificar por severidad e impacto
- [ ] Actualizar solo dependencias cr√≠ticas/altas
- [ ] Ejecutar tests completos
- [ ] Probar funcionalidades principales
- [ ] Verificar que no hay regresiones
- [ ] Documentar cambios realizados
- [ ] Merge a branch principal solo si todo est√° OK

---

**Nota**: Estas reglas deben ser revisadas y actualizadas regularmente seg√∫n la evoluci√≥n del proyecto y las mejores pr√°cticas de la industria.
